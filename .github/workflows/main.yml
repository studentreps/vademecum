# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Triggers the workflow anytime someone creates a tag, which triggers the create event.
  #create:
  #   tags:
  #     - 'v*' # Push events to matching v*, i.e. v1.0

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2
      # Compiles the LaTeX stuff
      - name: Compile vademecum.tex
        uses: xu-cheng/latex-action@v2
        with:
          # The root LaTeX file to be compiled
          root_file: vademecum.tex
          # The working directory for the LaTeX engine
          #working_directory: # optional
          # The LaTeX engine to be invoked
          #compiler: # optional, default is latexmk
          # Extra arguments to be passed to the LaTeX engine
          #args: # optional, default is -pdf -file-line-error -halt-on-error -interaction=nonstopmode
          # [Deprecated] Install extra packages by tlmgr
          #extra_packages: # optional
          # Install extra packages by apk
          #extra_system_packages: # optional
          # Arbitrary bash codes to be executed before compiling LaTeX documents
          #pre_compile: # optional
          # Arbitrary bash codes to be executed after compiling LaTeX documents
          #post_compile: # optional
          # Instruct latexmk to enable --shell-escape
          #latexmk_shell_escape: # optional
          # Instruct latexmk to use LuaLaTeX
          #latexmk_use_lualatex: # optional
          # Instruct latexmk to use XeLaTeX
          #latexmk_use_xelatex: # optional
      - name: Upload vademecum.pdf
        uses: actions/upload-artifact@v4.6.2
        with:
          # Artifact name
          name: vademecum
          path: vademecum.pdf
  deploy:    
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[release]')"
    needs: build
    steps:
      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d')"
      - name: Download Build Artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: vademecum
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.date.outputs.date }}                #${{ github.ref }}
          release_name: Release v${{ steps.date.outputs.date }}    #${{ github.ref }}
          body: New upstream release.
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: vademecum.pdf
          asset_name: vademecum.pdf
          asset_content_type: application/pdf
